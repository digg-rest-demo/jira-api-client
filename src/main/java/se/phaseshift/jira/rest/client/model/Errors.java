/*
 * The Jira Cloud platform REST API
 * Jira Cloud platform REST API documentation
 *
 * OpenAPI spec version: 1001.0.0-SNAPSHOT-d2bbf99a611e8c219fc0b1362289195366130541
 * Contact: ecosystem@atlassian.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package se.phaseshift.jira.rest.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import se.phaseshift.jira.rest.client.model.Error;
/**
 * Errors
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2024-04-17T13:21:14.321931+02:00[Europe/Stockholm]")

public class Errors {
  @SerializedName("issueIsSubtask")
  private Error issueIsSubtask = null;

  @SerializedName("issuesInArchivedProjects")
  private Error issuesInArchivedProjects = null;

  @SerializedName("issuesInUnlicensedProjects")
  private Error issuesInUnlicensedProjects = null;

  @SerializedName("issuesNotFound")
  private Error issuesNotFound = null;

  public Errors issueIsSubtask(Error issueIsSubtask) {
    this.issueIsSubtask = issueIsSubtask;
    return this;
  }

   /**
   * Get issueIsSubtask
   * @return issueIsSubtask
  **/
  @Schema(description = "")
  public Error getIssueIsSubtask() {
    return issueIsSubtask;
  }

  public void setIssueIsSubtask(Error issueIsSubtask) {
    this.issueIsSubtask = issueIsSubtask;
  }

  public Errors issuesInArchivedProjects(Error issuesInArchivedProjects) {
    this.issuesInArchivedProjects = issuesInArchivedProjects;
    return this;
  }

   /**
   * Get issuesInArchivedProjects
   * @return issuesInArchivedProjects
  **/
  @Schema(description = "")
  public Error getIssuesInArchivedProjects() {
    return issuesInArchivedProjects;
  }

  public void setIssuesInArchivedProjects(Error issuesInArchivedProjects) {
    this.issuesInArchivedProjects = issuesInArchivedProjects;
  }

  public Errors issuesInUnlicensedProjects(Error issuesInUnlicensedProjects) {
    this.issuesInUnlicensedProjects = issuesInUnlicensedProjects;
    return this;
  }

   /**
   * Get issuesInUnlicensedProjects
   * @return issuesInUnlicensedProjects
  **/
  @Schema(description = "")
  public Error getIssuesInUnlicensedProjects() {
    return issuesInUnlicensedProjects;
  }

  public void setIssuesInUnlicensedProjects(Error issuesInUnlicensedProjects) {
    this.issuesInUnlicensedProjects = issuesInUnlicensedProjects;
  }

  public Errors issuesNotFound(Error issuesNotFound) {
    this.issuesNotFound = issuesNotFound;
    return this;
  }

   /**
   * Get issuesNotFound
   * @return issuesNotFound
  **/
  @Schema(description = "")
  public Error getIssuesNotFound() {
    return issuesNotFound;
  }

  public void setIssuesNotFound(Error issuesNotFound) {
    this.issuesNotFound = issuesNotFound;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Errors errors = (Errors) o;
    return Objects.equals(this.issueIsSubtask, errors.issueIsSubtask) &&
        Objects.equals(this.issuesInArchivedProjects, errors.issuesInArchivedProjects) &&
        Objects.equals(this.issuesInUnlicensedProjects, errors.issuesInUnlicensedProjects) &&
        Objects.equals(this.issuesNotFound, errors.issuesNotFound);
  }

  @Override
  public int hashCode() {
    return Objects.hash(issueIsSubtask, issuesInArchivedProjects, issuesInUnlicensedProjects, issuesNotFound);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Errors {\n");
    
    sb.append("    issueIsSubtask: ").append(toIndentedString(issueIsSubtask)).append("\n");
    sb.append("    issuesInArchivedProjects: ").append(toIndentedString(issuesInArchivedProjects)).append("\n");
    sb.append("    issuesInUnlicensedProjects: ").append(toIndentedString(issuesInUnlicensedProjects)).append("\n");
    sb.append("    issuesNotFound: ").append(toIndentedString(issuesNotFound)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
