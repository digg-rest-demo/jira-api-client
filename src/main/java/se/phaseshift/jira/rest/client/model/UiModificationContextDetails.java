/*
 * The Jira Cloud platform REST API
 * Jira Cloud platform REST API documentation
 *
 * OpenAPI spec version: 1001.0.0-SNAPSHOT-d2bbf99a611e8c219fc0b1362289195366130541
 * Contact: ecosystem@atlassian.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package se.phaseshift.jira.rest.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
/**
 * The details of a UI modification&#x27;s context, which define where to activate the UI modification.
 */
@Schema(description = "The details of a UI modification's context, which define where to activate the UI modification.")
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2024-04-17T13:21:14.321931+02:00[Europe/Stockholm]")

public class UiModificationContextDetails {
  @SerializedName("id")
  private String id = null;

  @SerializedName("isAvailable")
  private Boolean isAvailable = null;

  @SerializedName("issueTypeId")
  private String issueTypeId = null;

  @SerializedName("projectId")
  private String projectId = null;

  /**
   * The view type of the context. Only &#x60;GIC&#x60;(Global Issue Create) and &#x60;IssueView&#x60; are supported. Null is treated as a wildcard, meaning the UI modification will be applied to all view types. Each UI modification context can have a maximum of one wildcard.
   */
  @JsonAdapter(ViewTypeEnum.Adapter.class)
  public enum ViewTypeEnum {
    @SerializedName("GIC")
    GIC("GIC"),
    @SerializedName("IssueView")
    ISSUEVIEW("IssueView");

    private String value;

    ViewTypeEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static ViewTypeEnum fromValue(String input) {
      for (ViewTypeEnum b : ViewTypeEnum.values()) {
        if (b.value.equals(input)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<ViewTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ViewTypeEnum enumeration) throws IOException {
        jsonWriter.value(String.valueOf(enumeration.getValue()));
      }

      @Override
      public ViewTypeEnum read(final JsonReader jsonReader) throws IOException {
        Object value = jsonReader.nextString();
        return ViewTypeEnum.fromValue((String)(value));
      }
    }
  }  @SerializedName("viewType")
  private ViewTypeEnum viewType = null;

   /**
   * The ID of the UI modification context.
   * @return id
  **/
  @Schema(description = "The ID of the UI modification context.")
  public String getId() {
    return id;
  }

   /**
   * Whether a context is available. For example, when a project is deleted the context becomes unavailable.
   * @return isAvailable
  **/
  @Schema(description = "Whether a context is available. For example, when a project is deleted the context becomes unavailable.")
  public Boolean isIsAvailable() {
    return isAvailable;
  }

  public UiModificationContextDetails issueTypeId(String issueTypeId) {
    this.issueTypeId = issueTypeId;
    return this;
  }

   /**
   * The issue type ID of the context. Null is treated as a wildcard, meaning the UI modification will be applied to all issue types. Each UI modification context can have a maximum of one wildcard.
   * @return issueTypeId
  **/
  @Schema(description = "The issue type ID of the context. Null is treated as a wildcard, meaning the UI modification will be applied to all issue types. Each UI modification context can have a maximum of one wildcard.")
  public String getIssueTypeId() {
    return issueTypeId;
  }

  public void setIssueTypeId(String issueTypeId) {
    this.issueTypeId = issueTypeId;
  }

  public UiModificationContextDetails projectId(String projectId) {
    this.projectId = projectId;
    return this;
  }

   /**
   * The project ID of the context. Null is treated as a wildcard, meaning the UI modification will be applied to all projects. Each UI modification context can have a maximum of one wildcard.
   * @return projectId
  **/
  @Schema(description = "The project ID of the context. Null is treated as a wildcard, meaning the UI modification will be applied to all projects. Each UI modification context can have a maximum of one wildcard.")
  public String getProjectId() {
    return projectId;
  }

  public void setProjectId(String projectId) {
    this.projectId = projectId;
  }

  public UiModificationContextDetails viewType(ViewTypeEnum viewType) {
    this.viewType = viewType;
    return this;
  }

   /**
   * The view type of the context. Only &#x60;GIC&#x60;(Global Issue Create) and &#x60;IssueView&#x60; are supported. Null is treated as a wildcard, meaning the UI modification will be applied to all view types. Each UI modification context can have a maximum of one wildcard.
   * @return viewType
  **/
  @Schema(description = "The view type of the context. Only `GIC`(Global Issue Create) and `IssueView` are supported. Null is treated as a wildcard, meaning the UI modification will be applied to all view types. Each UI modification context can have a maximum of one wildcard.")
  public ViewTypeEnum getViewType() {
    return viewType;
  }

  public void setViewType(ViewTypeEnum viewType) {
    this.viewType = viewType;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UiModificationContextDetails uiModificationContextDetails = (UiModificationContextDetails) o;
    return Objects.equals(this.id, uiModificationContextDetails.id) &&
        Objects.equals(this.isAvailable, uiModificationContextDetails.isAvailable) &&
        Objects.equals(this.issueTypeId, uiModificationContextDetails.issueTypeId) &&
        Objects.equals(this.projectId, uiModificationContextDetails.projectId) &&
        Objects.equals(this.viewType, uiModificationContextDetails.viewType);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, isAvailable, issueTypeId, projectId, viewType);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UiModificationContextDetails {\n");
    
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    isAvailable: ").append(toIndentedString(isAvailable)).append("\n");
    sb.append("    issueTypeId: ").append(toIndentedString(issueTypeId)).append("\n");
    sb.append("    projectId: ").append(toIndentedString(projectId)).append("\n");
    sb.append("    viewType: ").append(toIndentedString(viewType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
