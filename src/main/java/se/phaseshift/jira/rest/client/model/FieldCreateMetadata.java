/*
 * The Jira Cloud platform REST API
 * Jira Cloud platform REST API documentation
 *
 * OpenAPI spec version: 1001.0.0-SNAPSHOT-d2bbf99a611e8c219fc0b1362289195366130541
 * Contact: ecosystem@atlassian.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package se.phaseshift.jira.rest.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
/**
 * The metadata describing an issue field for createmeta.
 */
@Schema(description = "The metadata describing an issue field for createmeta.")
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2024-04-17T13:21:14.321931+02:00[Europe/Stockholm]")

public class FieldCreateMetadata {
  @SerializedName("allowedValues")
  private List<Object> allowedValues = null;

  @SerializedName("autoCompleteUrl")
  private String autoCompleteUrl = null;

  @SerializedName("configuration")
  private Map<String, Object> _configuration = null;

  @SerializedName("defaultValue")
  private Object defaultValue = null;

  @SerializedName("fieldId")
  private String fieldId = null;

  @SerializedName("hasDefaultValue")
  private Boolean hasDefaultValue = null;

  @SerializedName("key")
  private String key = null;

  @SerializedName("name")
  private String name = null;

  @SerializedName("operations")
  private List<String> operations = new ArrayList<String>();

  @SerializedName("required")
  private Boolean required = null;

  @SerializedName("schema")
  private AllOfFieldCreateMetadataSchema schema = null;

   /**
   * The list of values allowed in the field.
   * @return allowedValues
  **/
  @Schema(description = "The list of values allowed in the field.")
  public List<Object> getAllowedValues() {
    return allowedValues;
  }

   /**
   * The URL that can be used to automatically complete the field.
   * @return autoCompleteUrl
  **/
  @Schema(description = "The URL that can be used to automatically complete the field.")
  public String getAutoCompleteUrl() {
    return autoCompleteUrl;
  }

   /**
   * The configuration properties.
   * @return _configuration
  **/
  @Schema(description = "The configuration properties.")
  public Map<String, Object> getConfiguration() {
    return _configuration;
  }

   /**
   * The default value of the field.
   * @return defaultValue
  **/
  @Schema(description = "The default value of the field.")
  public Object getDefaultValue() {
    return defaultValue;
  }

   /**
   * The field id.
   * @return fieldId
  **/
  @Schema(required = true, description = "The field id.")
  public String getFieldId() {
    return fieldId;
  }

   /**
   * Whether the field has a default value.
   * @return hasDefaultValue
  **/
  @Schema(description = "Whether the field has a default value.")
  public Boolean isHasDefaultValue() {
    return hasDefaultValue;
  }

   /**
   * The key of the field.
   * @return key
  **/
  @Schema(required = true, description = "The key of the field.")
  public String getKey() {
    return key;
  }

   /**
   * The name of the field.
   * @return name
  **/
  @Schema(required = true, description = "The name of the field.")
  public String getName() {
    return name;
  }

   /**
   * The list of operations that can be performed on the field.
   * @return operations
  **/
  @Schema(required = true, description = "The list of operations that can be performed on the field.")
  public List<String> getOperations() {
    return operations;
  }

   /**
   * Whether the field is required.
   * @return required
  **/
  @Schema(required = true, description = "Whether the field is required.")
  public Boolean isRequired() {
    return required;
  }

   /**
   * The data type of the field.
   * @return schema
  **/
  @Schema(required = true, description = "The data type of the field.")
  public AllOfFieldCreateMetadataSchema getSchema() {
    return schema;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    FieldCreateMetadata fieldCreateMetadata = (FieldCreateMetadata) o;
    return Objects.equals(this.allowedValues, fieldCreateMetadata.allowedValues) &&
        Objects.equals(this.autoCompleteUrl, fieldCreateMetadata.autoCompleteUrl) &&
        Objects.equals(this._configuration, fieldCreateMetadata._configuration) &&
        Objects.equals(this.defaultValue, fieldCreateMetadata.defaultValue) &&
        Objects.equals(this.fieldId, fieldCreateMetadata.fieldId) &&
        Objects.equals(this.hasDefaultValue, fieldCreateMetadata.hasDefaultValue) &&
        Objects.equals(this.key, fieldCreateMetadata.key) &&
        Objects.equals(this.name, fieldCreateMetadata.name) &&
        Objects.equals(this.operations, fieldCreateMetadata.operations) &&
        Objects.equals(this.required, fieldCreateMetadata.required) &&
        Objects.equals(this.schema, fieldCreateMetadata.schema);
  }

  @Override
  public int hashCode() {
    return Objects.hash(allowedValues, autoCompleteUrl, _configuration, defaultValue, fieldId, hasDefaultValue, key, name, operations, required, schema);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class FieldCreateMetadata {\n");
    
    sb.append("    allowedValues: ").append(toIndentedString(allowedValues)).append("\n");
    sb.append("    autoCompleteUrl: ").append(toIndentedString(autoCompleteUrl)).append("\n");
    sb.append("    _configuration: ").append(toIndentedString(_configuration)).append("\n");
    sb.append("    defaultValue: ").append(toIndentedString(defaultValue)).append("\n");
    sb.append("    fieldId: ").append(toIndentedString(fieldId)).append("\n");
    sb.append("    hasDefaultValue: ").append(toIndentedString(hasDefaultValue)).append("\n");
    sb.append("    key: ").append(toIndentedString(key)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    operations: ").append(toIndentedString(operations)).append("\n");
    sb.append("    required: ").append(toIndentedString(required)).append("\n");
    sb.append("    schema: ").append(toIndentedString(schema)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
