/*
 * The Jira Cloud platform REST API
 * Jira Cloud platform REST API documentation
 *
 * OpenAPI spec version: 1001.0.0-SNAPSHOT-d2bbf99a611e8c219fc0b1362289195366130541
 * Contact: ecosystem@atlassian.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package se.phaseshift.jira.rest.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import org.threeten.bp.OffsetDateTime;
/**
 * Jql function precomputation.
 */
@Schema(description = "Jql function precomputation.")
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2024-04-17T13:21:14.321931+02:00[Europe/Stockholm]")

public class JqlFunctionPrecomputationBean {
  @SerializedName("arguments")
  private List<String> arguments = null;

  @SerializedName("created")
  private OffsetDateTime created = null;

  @SerializedName("error")
  private String error = null;

  @SerializedName("field")
  private String field = null;

  @SerializedName("functionKey")
  private String functionKey = null;

  @SerializedName("functionName")
  private String functionName = null;

  @SerializedName("id")
  private String id = null;

  @SerializedName("operator")
  private String operator = null;

  @SerializedName("updated")
  private OffsetDateTime updated = null;

  @SerializedName("used")
  private OffsetDateTime used = null;

  @SerializedName("value")
  private String value = null;

   /**
   * The list of arguments function was invoked with.
   * @return arguments
  **/
  @Schema(description = "The list of arguments function was invoked with.")
  public List<String> getArguments() {
    return arguments;
  }

   /**
   * The timestamp of the precomputation creation.
   * @return created
  **/
  @Schema(description = "The timestamp of the precomputation creation.")
  public OffsetDateTime getCreated() {
    return created;
  }

   /**
   * The error message to be displayed to the user.
   * @return error
  **/
  @Schema(description = "The error message to be displayed to the user.")
  public String getError() {
    return error;
  }

   /**
   * The field the function was executed against.
   * @return field
  **/
  @Schema(description = "The field the function was executed against.")
  public String getField() {
    return field;
  }

   /**
   * The function key.
   * @return functionKey
  **/
  @Schema(description = "The function key.")
  public String getFunctionKey() {
    return functionKey;
  }

   /**
   * The name of the function.
   * @return functionName
  **/
  @Schema(description = "The name of the function.")
  public String getFunctionName() {
    return functionName;
  }

   /**
   * The id of the precomputation.
   * @return id
  **/
  @Schema(description = "The id of the precomputation.")
  public String getId() {
    return id;
  }

   /**
   * The operator in context of which function was executed.
   * @return operator
  **/
  @Schema(description = "The operator in context of which function was executed.")
  public String getOperator() {
    return operator;
  }

   /**
   * The timestamp of the precomputation last update.
   * @return updated
  **/
  @Schema(description = "The timestamp of the precomputation last update.")
  public OffsetDateTime getUpdated() {
    return updated;
  }

   /**
   * The timestamp of the precomputation last usage.
   * @return used
  **/
  @Schema(description = "The timestamp of the precomputation last usage.")
  public OffsetDateTime getUsed() {
    return used;
  }

   /**
   * The JQL fragment stored as the precomputation.
   * @return value
  **/
  @Schema(description = "The JQL fragment stored as the precomputation.")
  public String getValue() {
    return value;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    JqlFunctionPrecomputationBean jqlFunctionPrecomputationBean = (JqlFunctionPrecomputationBean) o;
    return Objects.equals(this.arguments, jqlFunctionPrecomputationBean.arguments) &&
        Objects.equals(this.created, jqlFunctionPrecomputationBean.created) &&
        Objects.equals(this.error, jqlFunctionPrecomputationBean.error) &&
        Objects.equals(this.field, jqlFunctionPrecomputationBean.field) &&
        Objects.equals(this.functionKey, jqlFunctionPrecomputationBean.functionKey) &&
        Objects.equals(this.functionName, jqlFunctionPrecomputationBean.functionName) &&
        Objects.equals(this.id, jqlFunctionPrecomputationBean.id) &&
        Objects.equals(this.operator, jqlFunctionPrecomputationBean.operator) &&
        Objects.equals(this.updated, jqlFunctionPrecomputationBean.updated) &&
        Objects.equals(this.used, jqlFunctionPrecomputationBean.used) &&
        Objects.equals(this.value, jqlFunctionPrecomputationBean.value);
  }

  @Override
  public int hashCode() {
    return Objects.hash(arguments, created, error, field, functionKey, functionName, id, operator, updated, used, value);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class JqlFunctionPrecomputationBean {\n");
    
    sb.append("    arguments: ").append(toIndentedString(arguments)).append("\n");
    sb.append("    created: ").append(toIndentedString(created)).append("\n");
    sb.append("    error: ").append(toIndentedString(error)).append("\n");
    sb.append("    field: ").append(toIndentedString(field)).append("\n");
    sb.append("    functionKey: ").append(toIndentedString(functionKey)).append("\n");
    sb.append("    functionName: ").append(toIndentedString(functionName)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    operator: ").append(toIndentedString(operator)).append("\n");
    sb.append("    updated: ").append(toIndentedString(updated)).append("\n");
    sb.append("    used: ").append(toIndentedString(used)).append("\n");
    sb.append("    value: ").append(toIndentedString(value)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
