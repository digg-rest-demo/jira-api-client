/*
 * The Jira Cloud platform REST API
 * Jira Cloud platform REST API documentation
 *
 * OpenAPI spec version: 1001.0.0-SNAPSHOT-d2bbf99a611e8c219fc0b1362289195366130541
 * Contact: ecosystem@atlassian.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package se.phaseshift.jira.rest.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import se.phaseshift.jira.rest.client.model.DocumentVersion;
import se.phaseshift.jira.rest.client.model.MappingsByIssueTypeOverride;
import se.phaseshift.jira.rest.client.model.MappingsByWorkflow;
import se.phaseshift.jira.rest.client.model.WorkflowSchemeAssociation;
/**
 * The update workflow scheme payload.
 */
@Schema(description = "The update workflow scheme payload.")
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2024-04-17T13:21:14.321931+02:00[Europe/Stockholm]")

public class WorkflowSchemeUpdateRequest extends HashMap<String, Object> {
  @SerializedName("defaultWorkflowId")
  private String defaultWorkflowId = null;

  @SerializedName("description")
  private String description = null;

  @SerializedName("id")
  private String id = null;

  @SerializedName("name")
  private String name = null;

  @SerializedName("statusMappingsByIssueTypeOverride")
  private List<MappingsByIssueTypeOverride> statusMappingsByIssueTypeOverride = null;

  @SerializedName("statusMappingsByWorkflows")
  private List<MappingsByWorkflow> statusMappingsByWorkflows = null;

  @SerializedName("version")
  private DocumentVersion version = null;

  @SerializedName("workflowsForIssueTypes")
  private List<WorkflowSchemeAssociation> workflowsForIssueTypes = null;

  public WorkflowSchemeUpdateRequest defaultWorkflowId(String defaultWorkflowId) {
    this.defaultWorkflowId = defaultWorkflowId;
    return this;
  }

   /**
   * The ID of the workflow for issue types without having a mapping defined in this workflow scheme. Only used in global-scoped workflow schemes. If the &#x60;defaultWorkflowId&#x60; isn&#x27;t specified, this is set to *Jira Workflow (jira)*.
   * @return defaultWorkflowId
  **/
  @Schema(description = "The ID of the workflow for issue types without having a mapping defined in this workflow scheme. Only used in global-scoped workflow schemes. If the `defaultWorkflowId` isn't specified, this is set to *Jira Workflow (jira)*.")
  public String getDefaultWorkflowId() {
    return defaultWorkflowId;
  }

  public void setDefaultWorkflowId(String defaultWorkflowId) {
    this.defaultWorkflowId = defaultWorkflowId;
  }

  public WorkflowSchemeUpdateRequest description(String description) {
    this.description = description;
    return this;
  }

   /**
   * The new description for this workflow scheme.
   * @return description
  **/
  @Schema(required = true, description = "The new description for this workflow scheme.")
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }

  public WorkflowSchemeUpdateRequest id(String id) {
    this.id = id;
    return this;
  }

   /**
   * The ID of this workflow scheme.
   * @return id
  **/
  @Schema(required = true, description = "The ID of this workflow scheme.")
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }

  public WorkflowSchemeUpdateRequest name(String name) {
    this.name = name;
    return this;
  }

   /**
   * The new name for this workflow scheme.
   * @return name
  **/
  @Schema(required = true, description = "The new name for this workflow scheme.")
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }

  public WorkflowSchemeUpdateRequest statusMappingsByIssueTypeOverride(List<MappingsByIssueTypeOverride> statusMappingsByIssueTypeOverride) {
    this.statusMappingsByIssueTypeOverride = statusMappingsByIssueTypeOverride;
    return this;
  }

  public WorkflowSchemeUpdateRequest addStatusMappingsByIssueTypeOverrideItem(MappingsByIssueTypeOverride statusMappingsByIssueTypeOverrideItem) {
    if (this.statusMappingsByIssueTypeOverride == null) {
      this.statusMappingsByIssueTypeOverride = new ArrayList<MappingsByIssueTypeOverride>();
    }
    this.statusMappingsByIssueTypeOverride.add(statusMappingsByIssueTypeOverrideItem);
    return this;
  }

   /**
   * Overrides, for the selected issue types, any status mappings provided in &#x60;statusMappingsByWorkflows&#x60;. Status mappings are required when the new workflow for an issue type doesn&#x27;t contain all statuses that the old workflow has. Status mappings can be provided by a combination of &#x60;statusMappingsByWorkflows&#x60; and &#x60;statusMappingsByIssueTypeOverride&#x60;.
   * @return statusMappingsByIssueTypeOverride
  **/
  @Schema(description = "Overrides, for the selected issue types, any status mappings provided in `statusMappingsByWorkflows`. Status mappings are required when the new workflow for an issue type doesn't contain all statuses that the old workflow has. Status mappings can be provided by a combination of `statusMappingsByWorkflows` and `statusMappingsByIssueTypeOverride`.")
  public List<MappingsByIssueTypeOverride> getStatusMappingsByIssueTypeOverride() {
    return statusMappingsByIssueTypeOverride;
  }

  public void setStatusMappingsByIssueTypeOverride(List<MappingsByIssueTypeOverride> statusMappingsByIssueTypeOverride) {
    this.statusMappingsByIssueTypeOverride = statusMappingsByIssueTypeOverride;
  }

  public WorkflowSchemeUpdateRequest statusMappingsByWorkflows(List<MappingsByWorkflow> statusMappingsByWorkflows) {
    this.statusMappingsByWorkflows = statusMappingsByWorkflows;
    return this;
  }

  public WorkflowSchemeUpdateRequest addStatusMappingsByWorkflowsItem(MappingsByWorkflow statusMappingsByWorkflowsItem) {
    if (this.statusMappingsByWorkflows == null) {
      this.statusMappingsByWorkflows = new ArrayList<MappingsByWorkflow>();
    }
    this.statusMappingsByWorkflows.add(statusMappingsByWorkflowsItem);
    return this;
  }

   /**
   * The status mappings by workflows. Status mappings are required when the new workflow for an issue type doesn&#x27;t contain all statuses that the old workflow has. Status mappings can be provided by a combination of &#x60;statusMappingsByWorkflows&#x60; and &#x60;statusMappingsByIssueTypeOverride&#x60;.
   * @return statusMappingsByWorkflows
  **/
  @Schema(description = "The status mappings by workflows. Status mappings are required when the new workflow for an issue type doesn't contain all statuses that the old workflow has. Status mappings can be provided by a combination of `statusMappingsByWorkflows` and `statusMappingsByIssueTypeOverride`.")
  public List<MappingsByWorkflow> getStatusMappingsByWorkflows() {
    return statusMappingsByWorkflows;
  }

  public void setStatusMappingsByWorkflows(List<MappingsByWorkflow> statusMappingsByWorkflows) {
    this.statusMappingsByWorkflows = statusMappingsByWorkflows;
  }

  public WorkflowSchemeUpdateRequest version(DocumentVersion version) {
    this.version = version;
    return this;
  }

   /**
   * Get version
   * @return version
  **/
  @Schema(required = true, description = "")
  public DocumentVersion getVersion() {
    return version;
  }

  public void setVersion(DocumentVersion version) {
    this.version = version;
  }

  public WorkflowSchemeUpdateRequest workflowsForIssueTypes(List<WorkflowSchemeAssociation> workflowsForIssueTypes) {
    this.workflowsForIssueTypes = workflowsForIssueTypes;
    return this;
  }

  public WorkflowSchemeUpdateRequest addWorkflowsForIssueTypesItem(WorkflowSchemeAssociation workflowsForIssueTypesItem) {
    if (this.workflowsForIssueTypes == null) {
      this.workflowsForIssueTypes = new ArrayList<WorkflowSchemeAssociation>();
    }
    this.workflowsForIssueTypes.add(workflowsForIssueTypesItem);
    return this;
  }

   /**
   * Mappings from workflows to issue types.
   * @return workflowsForIssueTypes
  **/
  @Schema(description = "Mappings from workflows to issue types.")
  public List<WorkflowSchemeAssociation> getWorkflowsForIssueTypes() {
    return workflowsForIssueTypes;
  }

  public void setWorkflowsForIssueTypes(List<WorkflowSchemeAssociation> workflowsForIssueTypes) {
    this.workflowsForIssueTypes = workflowsForIssueTypes;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    WorkflowSchemeUpdateRequest workflowSchemeUpdateRequest = (WorkflowSchemeUpdateRequest) o;
    return Objects.equals(this.defaultWorkflowId, workflowSchemeUpdateRequest.defaultWorkflowId) &&
        Objects.equals(this.description, workflowSchemeUpdateRequest.description) &&
        Objects.equals(this.id, workflowSchemeUpdateRequest.id) &&
        Objects.equals(this.name, workflowSchemeUpdateRequest.name) &&
        Objects.equals(this.statusMappingsByIssueTypeOverride, workflowSchemeUpdateRequest.statusMappingsByIssueTypeOverride) &&
        Objects.equals(this.statusMappingsByWorkflows, workflowSchemeUpdateRequest.statusMappingsByWorkflows) &&
        Objects.equals(this.version, workflowSchemeUpdateRequest.version) &&
        Objects.equals(this.workflowsForIssueTypes, workflowSchemeUpdateRequest.workflowsForIssueTypes) &&
        super.equals(o);
  }

  @Override
  public int hashCode() {
    return Objects.hash(defaultWorkflowId, description, id, name, statusMappingsByIssueTypeOverride, statusMappingsByWorkflows, version, workflowsForIssueTypes, super.hashCode());
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class WorkflowSchemeUpdateRequest {\n");
    sb.append("    ").append(toIndentedString(super.toString())).append("\n");
    sb.append("    defaultWorkflowId: ").append(toIndentedString(defaultWorkflowId)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    statusMappingsByIssueTypeOverride: ").append(toIndentedString(statusMappingsByIssueTypeOverride)).append("\n");
    sb.append("    statusMappingsByWorkflows: ").append(toIndentedString(statusMappingsByWorkflows)).append("\n");
    sb.append("    version: ").append(toIndentedString(version)).append("\n");
    sb.append("    workflowsForIssueTypes: ").append(toIndentedString(workflowsForIssueTypes)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
