/*
 * The Jira Cloud platform REST API
 * Jira Cloud platform REST API documentation
 *
 * OpenAPI spec version: 1001.0.0-SNAPSHOT-d2bbf99a611e8c219fc0b1362289195366130541
 * Contact: ecosystem@atlassian.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package se.phaseshift.jira.rest.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import se.phaseshift.jira.rest.client.model.WorkflowAssociationStatusMapping;
/**
 * Overrides, for the selected issue types, any status mappings provided in &#x60;statusMappingsByWorkflows&#x60;. Status mappings are required when the new workflow for an issue type doesn&#x27;t contain all statuses that the old workflow has. Status mappings can be provided by a combination of &#x60;statusMappingsByWorkflows&#x60; and &#x60;statusMappingsByIssueTypeOverride&#x60;.
 */
@Schema(description = "Overrides, for the selected issue types, any status mappings provided in `statusMappingsByWorkflows`. Status mappings are required when the new workflow for an issue type doesn't contain all statuses that the old workflow has. Status mappings can be provided by a combination of `statusMappingsByWorkflows` and `statusMappingsByIssueTypeOverride`.")
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2024-04-17T13:21:14.321931+02:00[Europe/Stockholm]")

public class MappingsByIssueTypeOverride {
  @SerializedName("issueTypeId")
  private String issueTypeId = null;

  @SerializedName("statusMappings")
  private List<WorkflowAssociationStatusMapping> statusMappings = new ArrayList<WorkflowAssociationStatusMapping>();

  public MappingsByIssueTypeOverride issueTypeId(String issueTypeId) {
    this.issueTypeId = issueTypeId;
    return this;
  }

   /**
   * The ID of the issue type for this mapping.
   * @return issueTypeId
  **/
  @Schema(required = true, description = "The ID of the issue type for this mapping.")
  public String getIssueTypeId() {
    return issueTypeId;
  }

  public void setIssueTypeId(String issueTypeId) {
    this.issueTypeId = issueTypeId;
  }

  public MappingsByIssueTypeOverride statusMappings(List<WorkflowAssociationStatusMapping> statusMappings) {
    this.statusMappings = statusMappings;
    return this;
  }

  public MappingsByIssueTypeOverride addStatusMappingsItem(WorkflowAssociationStatusMapping statusMappingsItem) {
    this.statusMappings.add(statusMappingsItem);
    return this;
  }

   /**
   * The list of status mappings.
   * @return statusMappings
  **/
  @Schema(required = true, description = "The list of status mappings.")
  public List<WorkflowAssociationStatusMapping> getStatusMappings() {
    return statusMappings;
  }

  public void setStatusMappings(List<WorkflowAssociationStatusMapping> statusMappings) {
    this.statusMappings = statusMappings;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MappingsByIssueTypeOverride mappingsByIssueTypeOverride = (MappingsByIssueTypeOverride) o;
    return Objects.equals(this.issueTypeId, mappingsByIssueTypeOverride.issueTypeId) &&
        Objects.equals(this.statusMappings, mappingsByIssueTypeOverride.statusMappings);
  }

  @Override
  public int hashCode() {
    return Objects.hash(issueTypeId, statusMappings);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MappingsByIssueTypeOverride {\n");
    
    sb.append("    issueTypeId: ").append(toIndentedString(issueTypeId)).append("\n");
    sb.append("    statusMappings: ").append(toIndentedString(statusMappings)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
